-
  In order to test account transaction I create a new transaction
-
  !context
    uid: 'base.user_demo'
-
  !record {model: account.wallet.transaction, id: transaction_test_0}:
    sender_id: base.partner_demo
    receiver_id: base.res_partner_main1
    description: 'Test transaction between users'
    currency_ids:
      - model: "account.wallet.transaction"
        field: "currency_ids"
        price_unit: 50
        currency_id: COM
-
  I check that Initially customer invoice is in the "Draft" state
-
  !assert {model: account.wallet.transaction, id: transaction_test_0}:
    - state == 'draft'
-
  I check that luc, which isn't a moderator and isn't even implicated in the transaction can't confirm it
-
  !context
    uid: 'base_community.user_luc'
-
  !python {model: account.wallet.transaction}: |
    from openerp.osv import orm, osv
    try:
      self.confirm(cr, uid, [ref('transaction_test_0')])
      assert False, "Luc was able to confirm the transaction!"
    except osv.except_osv:
      pass
-
  I check that mark, which isn't a moderator and will receive but not send the transaction can't confirm it
-
  !context
    uid: 'base_community.user_mark'
-
  !python {model: account.wallet.transaction}: |
    from openerp.osv import orm, osv
    try:
      self.confirm(cr, uid, [ref('transaction_test_0')])
      assert False, "Mark was able to confirm the transaction!"
    except osv.except_osv:
      pass
-
  I check that demo, which isn't a moderator but is the sender of the transaction can confirm it
-
  !context
    uid: 'base.user_demo'
-
  !python {model: account.wallet.transaction}: |
    self.confirm(cr, uid, [ref('transaction_test_0')])
-
  !assert {model: account.wallet.transaction, id: transaction_test_0, string: "Demo wasn't able to confirm the transaction, or the confirm state wasn't skipped!"}:
    - state == 'done'
-
  I check that a reservation transaction was made
-
  !assert {model: account.wallet.transaction, id: transaction_test_0, string: "No reservation transaction was made"}:
    - reservation_id.id != False
-
  I check that a payment transaction was made
-
  !assert {model: account.wallet.transaction, id: transaction_test_0, string: "No payment transaction was made"}:
    - payment_id.id != False
#########################################################
-
  I check that luc, which isn't a moderator and isn't even implicated in the transaction can't cancel it
-
  !context
    uid: 'base_community.user_luc'
-
  !python {model: account.wallet.transaction}: |
    from openerp.osv import orm, osv
    try:
      self.reset_workflow(cr, uid, [ref('transaction_test_0')])
      assert False, "Luc was able to cancel the transaction!"
    except osv.except_osv:
      pass
-
  I check that demo, which isn't a moderator and sent but didn't receive the transaction can't cancel it
-
  !context
    uid: 'base.user_demo'
-
  !python {model: account.wallet.transaction}: |
    from openerp.osv import orm, osv
    try:
      self.reset_workflow(cr, uid, [ref('transaction_test_0')])
      assert False, "Demo was able to cancel the transaction!"
    except osv.except_osv:
      pass
-
  I check that mark, which isn't a moderator but is the receiver of the transaction can cancel it
-
  !context
    uid: 'base_community.user_mark'
-
  !python {model: account.wallet.transaction}: |
    self.reset_workflow(cr, uid, [ref('transaction_test_0')])
-
  !assert {model: account.wallet.transaction, id: transaction_test_0, string: "Mark wasn't able to cancel the transaction, or the confirm refund state wasn't skipped!"}:
    - state == 'cancel'
-
  I check that the reservation transaction is cancelled
-
  !assert {model: account.wallet.transaction, id: transaction_test_0, string: "The reservation transaction is still here!"}:
    - reservation_id.id == False
-
  I check that a payment transaction is cancelled
-
  !assert {model: account.wallet.transaction, id: transaction_test_0, string: "The payment transaction is still here!"}:
    - payment_id.id == False
#########################################################
-
  !context
    uid: 'base.user_demo'
-
  !python {model: account.wallet.transaction}: |
    self.reset_workflow(cr, uid, [ref('transaction_test_0')])
-
  I check that transaction is correctly reset to draft
-
  !assert {model: account.wallet.transaction, id: transaction_test_0, string: "The transaction wasn't reset to draft!"}:
    - state == 'draft'
-
  !python {model: account.wallet.transaction}: |
    self.confirm(cr, uid, [ref('transaction_test_0')])
-
  !assert {model: account.wallet.transaction, id: transaction_test_0, string: "Demo wasn't able to confirm the transaction at the final test, or the confirm state wasn't skipped!"}:
    - state == 'done'
-
  I check that a reservation transaction was made
-
  !assert {model: account.wallet.transaction, id: transaction_test_0, string: "No reservation transaction was made"}:
    - reservation_id.id != False
-
  I check that a payment transaction was made
-
  !assert {model: account.wallet.transaction, id: transaction_test_0, string: "No payment transaction was made"}:
    - payment_id.id != False