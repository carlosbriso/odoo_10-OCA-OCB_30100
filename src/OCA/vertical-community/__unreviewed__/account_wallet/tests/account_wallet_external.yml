-
  In order to test account transaction I create a new currency and transaction
-
  !record {model: res.currency, id: DUMMY}:
    name: DUMMY
    symbol: DUMMY
    rounding: 0.01
    accuracy: 4
-
  !record {model: res.currency.rate, id: rateDUMMY}:
    currency_id: DUMMY
    rate: 1.0
-
  !record {model: account.wallet.config.currency, id: wallet_currency_DUMMY}:
    config_id: base_community.community_settings
    currency_id: DUMMY
    limit_negative: 0
    limit_positive: 0
    partner_availability_account_id: community_partner_availability_account
    partner_reserved_account_id: community_partner_reserved_account
    partner_expense_account_id: community_partner_expense_account
    partner_income_account_id: community_partner_income_account
    external_currency: 1
-
  !assert {model: account.wallet.config.currency, id: wallet_currency_DUMMY, string: "The external_currency isn't correctly configured!"}:
    - external_currency == True
-
  !context
    uid: 'user_test1'
-
  !record {model: account.wallet.transaction, id: transaction_test_2}:
    sender_id: partner_test1
    receiver_id: partner_test2
    description: 'Test transaction between users'
    currency_ids:
      - model: "account.wallet.transaction"
        field: "currency_ids"
        price_unit: 50
        currency_id: DUMMY
-
  I check that test2, the receiver, can't confirm it
-
  !context
    uid: 'user_test2'
-
  !python {model: account.wallet.transaction}: |
    from openerp.osv import orm, osv
    try:
      self.confirm(cr, uid, [ref('transaction_test_2')])
      assert False, "Test2 was able to confirm the transaction!"
    except osv.except_osv:
      pass
-
  I check that test1, the sender, can confirm it
-
  !context
    uid: 'user_test1'
-
  !python {model: account.wallet.transaction}: |
    self.confirm(cr, uid, [ref('transaction_test_2')])
-
  !assert {model: account.wallet.transaction, id: transaction_test_2, string: "Test1 wasn't able to confirm the transaction, or the confirm state wasn't skipped!"}:
    - state == 'confirm'
-
  I check that a reservation transaction was made
-
  !assert {model: account.wallet.transaction, id: transaction_test_2, string: "No reservation transaction was made"}:
    - reservation_id.id != False
-
  I check that a payment transaction was made
-
  !assert {model: account.wallet.transaction, id: transaction_test_2, string: "No payment transaction was made"}:
    - payment_id.id != False
-
  I check that test1, the sender, can't confirm the reception
-
  !context
    uid: 'user_test1'
-
  !python {model: account.wallet.transaction}: |
    from openerp.osv import orm, osv
    from openerp import workflow
    try:
      workflow.trg_validate(uid, 'account.wallet.transaction', ref('transaction_test_2'), 'transaction_confirm_done', cr)
      assert False, "Test1 was able to confirm the transaction!"
    except osv.except_osv:
      pass
-
  I check that test1, the receiver, can confirm the reception
-
  !context
    uid: 'user_test2'
-
  !python {model: account.wallet.transaction}: |
    from openerp import workflow
    workflow.trg_validate(uid, 'account.wallet.transaction', ref('transaction_test_2'), 'transaction_confirm_done', cr)
-
  !assert {model: account.wallet.transaction, id: transaction_test_2, string: "Test2 wasn't able to confirm the transaction, or the confirm state was skipped!"}:
    - state == 'done'
-
  I check that a confirmation transaction was made
-
  !assert {model: account.wallet.transaction, id: transaction_test_2, string: "No confirmation transaction was made"}:
    - confirm_id.id != False
#########################################################
-
  I check that test1, the sender, can't cancel it
-
  !context
    uid: 'user_test1'
-
  !python {model: account.wallet.transaction}: |
    from openerp.osv import orm, osv
    try:
      self.reset_workflow(cr, uid, [ref('transaction_test_2')])
      assert False, "Test1 was able to cancel the transaction!"
    except osv.except_osv:
      pass
-
  I check that test2, the receiver, can cancel it
-
  !context
    uid: 'user_test2'
-
  !python {model: account.wallet.transaction}: |
    self.reset_workflow(cr, uid, [ref('transaction_test_2')])
-
  !assert {model: account.wallet.transaction, id: transaction_test_2, string: "Test2 wasn't able to cancel the transaction, or the confirm refund state was skipped!"}:
    - state == 'confirm_refund'
-
    I check that test2, the receiver, can't confirm the reception of the refund
-
  !context
    uid: 'user_test2'
-
  !python {model: account.wallet.transaction}: |
    from openerp.osv import orm, osv
    from openerp import workflow
    try:
      workflow.trg_validate(uid, 'account.wallet.transaction', ref('transaction_test_2'), 'transaction_confirm_refund_cancel', cr)
      assert False, "Mark was able to confirm the reception!"
    except osv.except_osv:
      pass
-
  I check that test1, the sender, can confirm the reception of the refund
-
  !context
    uid: 'user_test1'
-
  !python {model: account.wallet.transaction}: |
    from openerp import workflow
    workflow.trg_validate(uid, 'account.wallet.transaction', ref('transaction_test_2'), 'transaction_confirm_refund_cancel', cr)
-
  !assert {model: account.wallet.transaction, id: transaction_test_2, string: "Test1 wasn't able to confirm the reception of the refund!"}:
    - state == 'cancel'
-
  I check that the confirm transaction is cancelled
-
  !assert {model: account.wallet.transaction, id: transaction_test_2, string: "No confirm transaction is still here!"}:
    - confirm_id.id == False
-
  I check that the reservation transaction is cancelled
-
  !assert {model: account.wallet.transaction, id: transaction_test_2, string: "The reservation transaction is still here!"}:
    - reservation_id.id == False
-
  I check that a payment transaction is cancelled
-
  !assert {model: account.wallet.transaction, id: transaction_test_2, string: "The payment transaction is still here!"}:
    - payment_id.id == False
########################################################
-
  !context
    uid: 'user_test1'
-
  !python {model: account.wallet.transaction}: |
    self.reset_workflow(cr, uid, [ref('transaction_test_2')])
-
  I check that transaction is correctly reset to draft
-
  !assert {model: account.wallet.transaction, id: transaction_test_2, string: "The transaction wasn't reset to draft!"}:
    - state == 'draft'
-
  !python {model: account.wallet.transaction}: |
    self.confirm(cr, uid, [ref('transaction_test_2')])
-
  !assert {model: account.wallet.transaction, id: transaction_test_2, string: "Test1 wasn't able to confirm the transaction at the final test, or the confirm state wasn't skipped!"}:
    - state == 'confirm'
-
  I check that test2, the receiver can confirm the reception
-
  !context
    uid: 'user_test2'
-
  !python {model: account.wallet.transaction}: |
    from openerp import workflow
    workflow.trg_validate(uid, 'account.wallet.transaction', ref('transaction_test_2'), 'transaction_confirm_done', cr)
-
  !assert {model: account.wallet.transaction, id: transaction_test_2, string: "Test2 wasn't able to confirm the transaction, or the confirm state was skipped!"}:
    - state == 'done'
-
  I check that a confirm transaction was made
-
  !assert {model: account.wallet.transaction, id: transaction_test_2, string: "No confirm transaction was made"}:
    - confirm_id.id != False
-
  I check that a reservation transaction was made
-
  !assert {model: account.wallet.transaction, id: transaction_test_2, string: "No reservation transaction was made"}:
    - reservation_id.id != False
-
  I check that a payment transaction was made
-
  !assert {model: account.wallet.transaction, id: transaction_test_2, string: "No payment transaction was made"}:
    - payment_id.id != False