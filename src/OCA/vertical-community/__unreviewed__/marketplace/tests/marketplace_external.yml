-
  In order to test account transaction I create a new currency and proposition
-
  !record {model: res.currency, id: DUMMY}:
    name: DUMMY
    symbol: DUMMY
    rounding: 0.01
    accuracy: 4
-
  !record {model: res.currency.rate, id: rateDUMMY}:
    currency_id: DUMMY
    rate: 1.0
-
  !record {model: account.wallet.config.currency, id: wallet_currency_DUMMY}:
    config_id: base_community.community_settings
    currency_id: DUMMY
    limit_negative: 0
    limit_positive: 0
    partner_availability_account_id: account_wallet.community_partner_availability_account
    partner_reserved_account_id: account_wallet.community_partner_reserved_account
    partner_expense_account_id: account_wallet.community_partner_expense_account
    partner_income_account_id: account_wallet.community_partner_income_account
    external_currency: 1
-
  !assert {model: account.wallet.config.currency, id: wallet_currency_DUMMY, string: "The external_currency isn't correctly configured!"}:
    - external_currency == True
-
  In order to test marketplace.proposition I create a new proposition
-
  !context
    uid: 'user_test2'
-
  !record {model: marketplace.proposition, id: proposition_test_2}:
    announcement_id: announcement_test_1
    description: We think we can help you
    sender_id: partner_test2
    quantity: 1
    currency_ids:
      - model: "account.wallet.transaction"
        field: "currency_ids"
        price_unit: 50
        currency_id: DUMMY
-
  I check that test2, the proposer, can publish it
-
  !context
    uid: 'user_test2'
-
  !python {model: marketplace.proposition}: |
    from openerp import workflow
    workflow.trg_validate(uid, 'marketplace.proposition', ref('proposition_test_2'), 'proposition_draft_open', cr)
-
  !assert {model: marketplace.proposition, id: proposition_test_2, string: "Test2 wasn't able to publish the proposition!"}:
    - state == 'open'
-
  I check that test1, the announcer, can accept it
-
  !context
    uid: 'user_test1'
-
  !python {model: marketplace.proposition}: |
    from openerp import workflow
    workflow.trg_validate(uid, 'marketplace.proposition', ref('proposition_test_2'), 'proposition_open_accepted', cr)
-
  !assert {model: marketplace.proposition, id: proposition_test_2, string: "Test1 wasn't able to accept the proposition!"}:
    - state == 'accepted'
-
  I check that test2, the invoicer, can invoice it
-
  !context
    uid: 'user_test2'
-
  !python {model: marketplace.proposition}: |
    from openerp import workflow
    workflow.trg_validate(uid, 'marketplace.proposition', ref('proposition_test_2'), 'proposition_accepted_invoiced', cr)
-
  !assert {model: marketplace.proposition, id: proposition_test_2, string: "Test1 wasn't able to invoice the proposition!"}:
    - state == 'invoiced'
-
  I check that a invoice transaction was made
-
  !assert {model: marketplace.proposition, id: proposition_test_2, string: "No invoice transaction was made"}:
    - invoice_id.id != False
-
  I check that test1, the payer, can pay it
-
  !context
    uid: 'user_test1'
-
  !python {model: marketplace.proposition}: |
    self.pay(cr, uid, [ref('proposition_test_2')])
-
  !assert {model: marketplace.proposition, id: proposition_test_2, string: "Test2 wasn't able to pay the proposition or confirm state was skipped!"}:
    - state == 'confirm'
-
  I check that a payment transaction was made
-
  !assert {model: marketplace.proposition, id: proposition_test_2, string: "No payment transaction was made"}:
    - payment_id.id != False
-
  I check that test1, the payer, can't confirm the reception of the payment
-
  !context
    uid: 'user_test1'
-
  !python {model: marketplace.proposition}: |
    from openerp.osv import orm, osv
    from openerp import workflow
    try:
      self.confirm(cr, uid, [ref('proposition_test_2')])
      assert False, "Test1 was able to confirm the reception!"
    except osv.except_osv:
      pass
-
  I check that test2, the invoicer, can confirm the reception of the payment
-
  !context
    uid: 'user_test2'
-
  !python {model: marketplace.proposition}: |
    self.confirm(cr, uid, [ref('proposition_test_2')])
-
  !assert {model: marketplace.proposition, id: proposition_test_2, string: "Test2 wasn't able to confirm the proposition!"}:
    - state == 'vote'
-
  !assert {model: marketplace.proposition, id: proposition_test_2, string: "No confirm transaction was made"}:
    - confirm_id.id != False
-
  I write the vote from test1
-
  !context
    uid: 'user_test1'
-
  !record {model: marketplace.proposition, id: proposition_test_2}:
    vote_vote_ids:
      - model: "marketplace.proposition"
        partner_id: partner_test1
        comment: VoteExternalPartner1
        line_ids:
          - type_id: vote_cordial
            vote: '1'
          - type_id: vote_meet_needs
            vote: '2'
          - type_id: vote_code_quality
            vote: '1'
-
  I write the vote from test2
-
  !context
    uid: 'user_test2'
-
  !record {model: marketplace.proposition, id: proposition_test_2}:
    vote_vote_ids:
      - model: "marketplace.proposition"
        partner_id: partner_test2
        comment: VoteExternalPartner2
        line_ids:
          - type_id: vote_cordial
            vote: '1'
          - type_id: vote_meet_needs
            vote: '2'
          - type_id: vote_code_quality
            vote: '1'
-
  I check that votes are complete and the proposition went in the final stage
-
  !assert {model: marketplace.proposition, id: proposition_test_2, string: "The votes wasn't enough to move the proposition in his final stage!"}:
    - state == 'paid'
########################################################
-
  I check that test2, the invoicer, can cancel it
-
  !context
    uid: 'user_test2'
-
  !python {model: marketplace.proposition}: |
    self.reset_workflow(cr, uid, [ref('proposition_test_2')])
-
  !assert {model: marketplace.proposition, id: proposition_test_2, string: "Test2 wasn't able to cancel the proposition, or the confirm refund state was skipped!"}:
    - state == 'confirm_refund'
-
  I check that test2, the invoicer, can't confirm the reception of the refund
-
  !context
    uid: 'user_test2'
-
  !python {model: marketplace.proposition}: |
    from openerp.osv import orm, osv
    from openerp import workflow
    try:
      workflow.trg_validate(uid, 'marketplace.proposition', ref('proposition_test_2'), 'proposition_confirm_refund_cancel', cr)
      assert False, "Test2 was able to confirm the reception!"
    except osv.except_osv:
      pass
-
  I check that test1, the payer, can confirm the reception of the refund
-
  !context
    uid: 'user_test1'
-
  !python {model: marketplace.proposition}: |
    from openerp import workflow
    workflow.trg_validate(uid, 'marketplace.proposition', ref('proposition_test_2'), 'proposition_confirm_refund_cancel', cr)
-
  !assert {model: marketplace.proposition, id: proposition_test_2, string: "Test2 wasn't able to confirm the proposition!"}:
    - state == 'cancel'
-
  !assert {model: marketplace.proposition, id: proposition_test_1, string: "The confirm transaction is still here!"}:
    - confirm_id.id == False
-
      I check that test2, the proposer, can reset it
-
  !context
    uid: 'user_test2'
-
  !python {model: marketplace.proposition}: |
    self.reset_workflow(cr, uid, [ref('proposition_test_2')])
#####################################################
-
  I check that test2, the proposer, can publish it
-
  !context
    uid: 'user_test2'
-
  !python {model: marketplace.proposition}: |
    from openerp import workflow
    workflow.trg_validate(uid, 'marketplace.proposition', ref('proposition_test_2'), 'proposition_draft_open', cr)
-
  !assert {model: marketplace.proposition, id: proposition_test_2, string: "Test2 wasn't able to publish the proposition!"}:
    - state == 'open'
-
  I check that test1, the announcer, can accept it
-
  !context
    uid: 'user_test1'
-
  !python {model: marketplace.proposition}: |
    from openerp import workflow
    workflow.trg_validate(uid, 'marketplace.proposition', ref('proposition_test_2'), 'proposition_open_accepted', cr)
-
  !assert {model: marketplace.proposition, id: proposition_test_2, string: "Test1 wasn't able to accept the proposition!"}:
    - state == 'accepted'
-
  I check that test2, the invoicer, can invoice it
-
  !context
    uid: 'user_test2'
-
  !python {model: marketplace.proposition}: |
    from openerp import workflow
    workflow.trg_validate(uid, 'marketplace.proposition', ref('proposition_test_2'), 'proposition_accepted_invoiced', cr)
-
  !assert {model: marketplace.proposition, id: proposition_test_2, string: "Test1 wasn't able to invoice the proposition!"}:
    - state == 'invoiced'
-
  I check that test1, the payer, can pay it
-
  !context
    uid: 'user_test1'
-
  !python {model: marketplace.proposition}: |
    self.pay(cr, uid, [ref('proposition_test_2')])
-
  !assert {model: marketplace.proposition, id: proposition_test_2, string: "Test2 wasn't able to pay the proposition or confirm state was skipped!"}:
    - state == 'confirm'
-
  I check that test2, the invoicer, can confirm the reception of the payment
-
  !context
    uid: 'user_test2'
-
  !python {model: marketplace.proposition}: |
    self.confirm(cr, uid, [ref('proposition_test_2')])
-
  !assert {model: marketplace.proposition, id: proposition_test_2, string: "Test2 wasn't able to confirm the proposition!"}:
    - state == 'paid'